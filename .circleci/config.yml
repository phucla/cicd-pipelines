# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
  slack: circleci/slack@4.1

commands:
  slack_notification:
    description: "Slack notification"
    steps:
      - slack/notify:
          custom: |
            {
              "attachments": [
                {
                  "color": "#d50054",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "Your build is FAILED",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Build *${CIRCLE_BUILD_NUM}* is failed. Job is ${CIRCLE_JOB} as here: ${CIRCLE_BUILD_URL}"
                      }
                    }
                  ]
                }
              ]
            }
          event: fail

      - slack/notify:
          event: pass
          custom: |
            {
              "attachments": [
                {
                  "color": "#00d581",
                  "blocks": [
                    {
                      "type": "header",
                      "text": {
                        "type": "plain_text",
                        "text": "Your build is PASSED",
                        "emoji": true
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "Build *${CIRCLE_BUILD_NUM}* is PASSED as here: ${CIRCLE_BUILD_URL}"
                      }
                    }
                  ]
                }
              ]
            }
  sayhello:
    description: "A very simple command for demonstration purposes"
    parameters:
      to:
        type: string
        default: "Hello world"
    steps:
      - run: echo << parameters.to >>
  print_pipeline_id:
    description: "Print pipeline id"
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID

  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
jobs:
  notify:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always
  print_pipeline:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - print_pipeline_id

  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: save hello command
          command: echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
      - slack_notification
  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt

  print-hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: print hello command
          command: echo ${MY_NAME_VAR}
  print-world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: print world command
          command: echo $MY_NAME_VAR

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - destroy_environment

  update_inventory:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: update inventory file
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cf:41:1f:d5:1c:fb:3c:4d:1d:b3:c8:9e:19:86:9a:86"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible

      - run:
          name: Run playbook and config server
          command: |
            ansible-playbook main-remote.yml -i inventory

  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      # - run: apk add --update curl
      - run:
          name: smoke test
          # command: |
          #   URL="https://blog.udacity.com/"
          #   # Test if website exists
          #   if curl -s --head ${URL}
          #   then
          #     return 0
          #   else
          #     return 1
          #   fi
          command: |
            return 1
      - destroy_environment

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync ./roles/setup/files s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack.
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack.
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the print_hello job in its own container
    jobs:
      - save_hello_world_output
      - notify
      # - create_infrastructure
      # - update_inventory:
      #     requires:
      #       - create_infrastructure
      # - configure_infrastructure:
      #     requires:
      #       - update_inventory
      # - create_and_deploy_front_end
      # - promote_to_production:
      #     requires:
      #       - create_and_deploy_front_end
      # - get_last_deployment_id:
      #     requires:
      #       - promote_to_production
      # - clean_up_old_front_end:
      #     requires:
      #       - get_last_deployment_id
      #       - promote_to_production
